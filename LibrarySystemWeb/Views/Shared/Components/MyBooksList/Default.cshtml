@model LibrarySystemWeb.Models.MyBooksListViewModel

@{
    int nextPage = Model.pageNum + 1 > Model.maxPages ? Model.maxPages : Model.pageNum + 1;
    int previousPage = Model.pageNum - 1 > 1 ? Model.pageNum - 1 : 1;
    int maxPage = Model.maxPages;
    int pageNum = Model.pageNum;
    int currentPage = Model.currentPage;
    string errMsg = Model.errMsg ?? null;

    List<(Book book, Borrow borrow)>? myBooks = Model.myBooks; // Added semicolon and nullable type
    if (myBooks == null)
    {
        myBooks = new List<(Book book, Borrow borrow)>();
    }

    Console.WriteLine("MyBooksList: \n" +
                      "pageNum " + Model.pageNum + "\n" +
                      "maxPages " + Model.maxPages + "\n" +
                      "currentPage " + Model.currentPage + "\n");
}

@if (errMsg == null)
{
    <div class="container" style="width: 100%;">
        @await Component.InvokeAsync("Pagination", new
            {
                previousPage = previousPage,
                nextPage = nextPage,
                maxPage = maxPage,
                currentPage = currentPage,
            })

        <table class="table table-striped" style="max-width: 2000px; width: 100%;">
            <thead>
                <tr>
                    <th scope="col">Title</th>
                    <th scope="col">Description</th>
                    <th scope="col">Author</th>
                    <th scope="col">Published Year</th>
                    <th scope="col">Scheduled Return</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var data in myBooks) 
                {
                    <tr>
                        <td>@data.book.Title</td> 
                        <td>@data.book.Description</td>
                        <td>@data.book.Author</td>
                        <td>@(data.book.PublishedYear)</td>
                        <td>@data.borrow.ScheduleReturnDate.ToString("yyyy-MM-dd")</td>
                    </tr>
                }
            </tbody>
        </table>

        @await Component.InvokeAsync("Pagination", new
            {
                previousPage = previousPage,
                nextPage = nextPage,
                maxPage = maxPage,
                currentPage = currentPage,
            })
    </div>
}
else
{
    <div class="container" style="width: 100%;">
        <h2>@errMsg</h2>
    </div>
}